diff '--color=auto' -r main/.git oldarc/.git
1c1
< gitdir: /home/nn/src/git/hub/.git/worktrees/main
---
> gitdir: /home/nn/src/git/hub/.git/worktrees/oldarc
diff '--color=auto' -r main/.gitignore oldarc/.gitignore
1d0
< depends.mk
18,21c17
< ,/bin/lspath
< bin/lspath
< *.oo
< *.aa
---
> 
Only in oldarc: GNUmakefile
diff '--color=auto' -r main/Makefile oldarc/Makefile
1,60c1
< MAKEFLAGS:= -rR -j24
< .EXPORT_ALL_VARIABLED:
< all:
< define dir_infer
< 
< $1/src:=  $(wildcard  $1/*.cc)                         
< $1/exe:=  $(patsubst  %.cc,%,   $($1/src))             
< $1/asm:=  $(wildcard  $1/*.S)                          
< $1/xxx:=  $(patsubst  %,%.o,   $($1/asm))             
< $1/exe+=  $(patsubst  %,%,      $($1/asm))             
< $1/obj:=  $(patsubst  %,%.o,   $($1/src))             
< $1/cpp:=  $(patsubst  %,%.ii,   $($1/src))             
< $1/dep:=  $(patsubst  %,%.d,    $($1/obj)   $($1/cpp)  $($1/asm))
< $1:=$($1/exe)
< endef
< $(call dir_infir,bin,lib) 
< 
< all/obj:= $(lib/obj) $(bin/obj)
< all/xxx:= $(lib/xxx) $(bin/xxx)
< all/cpp:= $(lib/cpp) $(bin/cpp)
< all/src:= $(lib/src) $(bin/src)
< all/dep:= $(lib/dep) $(bin/dep)
< 
< include /dev/null $(wildcard $(all/dep))
< 
< ext/obj:= $(filter-out $(all/obj), $(wildcard *.o))
< ext/xxx:= $(filter-out $(all/xxx), $(wildcard *.o))
< 
< all:= $(bin/exe) $(lib/lib)
< bin:= $(bin/exe)
< lib:= $(lib/lib)
< $(bin): $(lib)
< all: $(all)
< 
< include /dev/null $(wildcard $(all/dep))
< 
< $(lib/lib): $(lib/obj) $(lib/xxx)
< 	sbin/arch "$@" $(lib/obj) $(lib/xxx)
< 
< $(bin/exe): %: %.o sbin/link etc/ld_flags
< 	sbin/link "$@" $(lib/lib)
< 
< $(all/cpp): %.ii: %.cc sbin/prec etc/cppflags
< 	rm -f $*.ii $*.o
< 	sbin/prec "$@"
< 
< $(all/xxx): %.o: %.S sbin/casm etc/asmflags
< 	sbin/casm "$@"
< 
< $(all/obj): %.o: %.ii sbin/comp etc/cxxflags
< 	sbin/comp "$@"
< 
< cur/dep:=$(wildcard *.o.d)
< cur/obj:=$(wildcard *.o) $(patsubst %.d,%,$(cur/dep))
< cur/src:=$(patsubst %.o,%.cc,$(cur/obj))
< 
< 
< ifneq ($(have),$(want))
< $(lib/lib): rem-lib
< endif
---
> test:
62,63c3,66
< ###   
< clean: date:=$(shell serdate)
---
> MAKEFLAGS+= -rR -j1
> AR_FLAGS= rU
> LD_FLAGS= @etc/ld_flags
> CPPFLAGS= @etc/cppflags 
> DEPFLAGS= -MF $<.d -MT $@ -MD
> CXXFLAGS:= @etc/cxxflags
> ASMFLAGS:= @etc/asmflags
> 
> CXX:= g++
> 
> LD= ld
> 
> 
> BIN_ASM:=$(wildcard bin/*.S)
> BIN_CXX:=$(wildcard bin/*.cc)
> BIN_OBJ:=$(patsubst %.cc,%.cc.o,$(BIN_CXX))
> BIN_OBJ+=$(patsubst %.S,%.S.o,$(BIN_ASM))
> CXX_BIN:=$(patsubst %.cc,%,$(BIN_CXX))
> ASM_BIN:=$(patsubst %.S,%,$(BIN_ASM))
> BIN_BIN:=$(CXX_BIN) $(ASM_BIN)
> 
> LIB_ASM:=$(wildcard lib/*.S)
> LIB_CXX:=$(wildcard lib/*.cc)
> LIB_OBJ:=$(patsubst %.cc,%.cc.o,$(LIB_CXX))
> LIB_OBJ+=$(patsubst %.S,%.S.o,$(LIB_ASM))
> 
> lib/strerror_list.cc: script/genstrerror.pl
> 	rm -f lib/strerror_list*
> 	vi_perl $<
> 
> START:= lib/start.S.o
> LIB_LIB:=lib/libkernpp.a
> 
> $(LIB_LIB): $(LIB_OBJ)
> 	ar $(AR_FLAGS) $@.new $(LIB_OBJ)
> 	mv $@.new $@
> 
> .PRECIOUS: lib/start.S.o
> 
> $(ASM_BIN): %: %.S.o 
> 	$(LD) -static $< -o $@
> 
> $(CXX_BIN): %: %.cc.o $(START) $(LIB_LIB)
> 	$(LD) -static $(START) $<  $(LIB_LIB) -o $@
> 
> $(filter %.S.o,$(LIB_OBJ)): %.S.o: %.S
> 	$(CXX) -g $(CPPFLAGS) $(CXXFLAGS) $(ASMFLAGS) -c $< -o $@
> 
> $(filter %.cc.o,$(LIB_OBJ)): %.cc.o: %.cc  etc/asmflags etc/cppflags etc/cxxflags
> 	$(CXX) -g $(CPPFLAGS) $(CXXFLAGS) $(ASMFLAGS) -c $< -o $@
> 
> $(filter %.cc.o, $(BIN_OBJ)): %.cc.o: %.cc etc/asmflags etc/cppflags etc/cxxflags
> 	$(CXX) -g $(CPPFLAGS) $(CXXFLAGS) $(ASMFLAGS) -c $< -o $@
> 
> $(filter %.S.o,$(BIN_OBJ)): %.S.o: %.S etc/asmflags etc/cppflags etc/cxxflags
> 	$(CXX) -g $(CPPFLAGS) $(CXXFLAGS) $(ASMFLAGS) -c $< -o $@
> 
> 
> deps=$(wildcard */*.d)
> 
> depends.mk: $(deps)
> 	perl depends.pl $(deps) > $@
> 
> include depends.mk
66c69
< 	rm -f */*.[ioad]
---
> 	rm -f */*.cc.o */*.cc.ii */*.cc.s */*.cc.d $(BIN_EXE) $(LIB_LIB)
68,71c71,72
< $(all/obj): sbin/comp
< $(bin/exe): sbin/link
< $(lib/lib): sbin/arch
< $(bin/exe): $(lib)
---
> test: $(BIN_BIN)
> 	perl test.pl $(BIN_BIN)
73,74c74,75
< tags: */*.cc */*.hh
< 	ctags --language-force=c++ */*.cc */*.hh
---
> $(patsubst %,%_test,$(BIN_BIN)): %_test: %
> 	perl test.pl $<
76,77d76
< nm:
< 	nm */*.a */*.o --defined-only -A --demangle
diff '--color=auto' -r main/bin/.gitignore oldarc/bin/.gitignore
9,20d8
< not
< cat
< echo
< false
< ls
< lspath
< not
< report
< string_view
< test_getopt
< true
< usleep
diff '--color=auto' -r main/bin/cat.cc oldarc/bin/cat.cc
51a52,93
> extern "C" {
>   int main(int argc, char**argv,char **envp);
> };
> template<typename val_t>
> struct vector
> {
>   val_t *arr;
>   size_t len;
>   vector()
>     : arr(nullptr), len(0)
>   {
>   };
>   vector(val_t *beg, val_t *end)
>     : arr(beg), len(end-beg)
>   {
>   };
>   val_t &operator[](size_t n)
>   {
>     assert(n<size());
>     return arr[n];
>   };
>   const val_t &operator[](size_t n) const
>   {
>     assert(n<size());
>     return arr[n];
>   };
>   size_t size() const {
>     return  len;
>   };
>   const val_t *begin() const {
>     return arr;
>   };
>   const val_t *end() const {
>     return arr+len;
>   };
>   val_t *begin() {
>     return arr;
>   };
>   val_t *end() {
>     return arr+len;
>   };
> };
77a120,132
>   write(1,L("argc="));
>   write_dec(1,argc);
>   write(1,L("\nargv=\n"));
>   for(int i=0;i<argc;i++) {
>     write_dec(1,i);
>     write(1,L(": "));
>     write(1,argv[i]);
>     write(1,L("\n"));
>   };
>   return 0;
> };
> int xmain(int argc, char** argv,char**envp)
> {
85a141,147
>     write(1,"c=");
>     write_dec(1,c);
>     write(1," argc=");
>     write_dec(1,argc);
>     write(1," optind=");
>     write_dec(1,optind);
>     write(1,"\n");
139c201
<         write(2,"open:");
---
>         write(2,"open:",5);
diff '--color=auto' -r main/bin/echo.cc oldarc/bin/echo.cc
4c4,7
< int main(int argc, char**argv,char **envp) {
---
> extern "C" {
>   int main(int argc, char**argv);
> };
> int main(int argc, char**argv) {
diff '--color=auto' -r main/bin/ls.cc oldarc/bin/ls.cc
10c10
< void swap(obj_t &lhs, obj_t &rhs)
---
> void swap(obj_t &lhs, obj_t rhs)
15a16,80
> struct dirents_t {
>   struct ent_t {
>     bool dir;
>     char name[256];
>     ent_t()
>       :dir(false)
>     {
>     };
>     ent_t(const char *_name, bool _dir)
>       :dir(_dir)
>     {
>       strncpy(name,_name,sizeof(name));
>     };
>   };
>   size_t cap;
>   size_t cnt;
>   ent_t **lst;
>   dirents_t()
>     : lst(0), cap(0), cnt(0)
>   {
>   };
>   int cmp(ent_t &lhs, ent_t&rhs) {
>     return strcmp(rhs.name,lhs.name);
>   };
>   void sort() {
>     size_t n=size();
>     for(int i=0;i<n-2;i++) {
>       int m=i;
>       for(int j=i+1;j<n;j++) {
>         if(cmp(*lst[m],*lst[j])<0)
>           m=j;
>       };
>       if(i!=m)
>         swap(lst[i],lst[m]);
>     };
>   };
>   ~dirents_t() {
>     for(int i=0;i<cnt;i++)
>       delete lst[i];
>     delete[] lst;
>   };
>   void push_back(const char *name, bool isdir)
>   {
>     if(cnt==cap) {
>       if(cap) {
>         ent_t **nlst = new ent_t*[cap+16];
>         memcpy(nlst,lst,sizeof(ent_t*)*cap);
>         delete[] lst;
>         lst=nlst;
>       } else {
>         lst = new ent_t*[16];
>       };
>       cap+=16;
>     };
>     ent_t *new_ent=new ent_t(name,isdir);
>     lst[cnt++]=new_ent;
>   };
>   ent_t &get(size_t pos)
>   {
>     return *lst[pos];
>   };
>   size_t size() const {
>     return cnt;
>   };
> };
24,26d88
< bool dotfiles=false;
< static void *ptrs[4096];
< static size_t nptr=0;
28,68d89
< 
< int sign(int lhs){
<   if(lhs<0)
<     return -1;
<   else if (lhs>0)
<     return 1;
<   else
<     return 0;
< };
< int cmp(const char *lhs, const char *rhs){
<   while(*lhs == *rhs && *lhs)
<     ++lhs, ++rhs;
<   return sign(*lhs-*rhs);
< };
< void sort(linux_dirent **beg, linux_dirent**end)
< {
<   if(beg==end)
<     return;
<   linux_dirent** pos=beg;
<   while(pos<end){
<     while(++beg<end){
<       if(cmp((*beg)->d_name,(*pos)->d_name)<0)
<         swap(*beg,*pos);
<     }
<     pos++;
<     beg=pos;
<   }
< };
< bool skip(const char *name){
<   if(name[0]!='.')
<     return false;
<   if(ignore==normal)
<     return true;
<   if(ignore==minimal)
<     return false;
<   if(name[1]==0)
<     return true;
<   if(name[1]=='.' && name[2]==0)
<     return true;
<   return false;
< };
70,71d90
<   int n=0;
<   linux_dirent*ents[8192];
72a92
>   dirents_t ents;
82,85c102,103
<     while(beg!=end){
<       if(!skip(beg->d_name)){
<         ents[n++]=beg;
<       };
---
>     while(beg!=end) {
>       ents.push_back(beg->d_name,beg->d_type == DT_DIR);
87c105,106
<     }
---
>     };
>     //mm_show();
89,92c108,122
<   sort(ents,ents+n);
<   for(int i=0;i<n;i++){
<     write(1,ents[i]->d_name);
<     write(1,"\n");
---
>   ents.sort();
>   for(size_t i=0;i<ents.size();i++)
>   {
>     auto ent=ents.get(i);
>     if(ignore==dot_dot) {
>       if(!strcmp(ent.name,"."))
>         continue;
>       if(!strcmp(ent.name,".."))
>         continue;
>     } else if ( ignore != minimal ) {
>       if(ent.name[0]=='.')
>         continue;
>     };
>     write(1,ent.name);
>     write(1,L("\n"));
150a181,183
> extern "C" {
>   int main(int argc, char**argv, char**envp) ;
> };
161d193
<   using fmt::write_dec;
179,186d210
<   };
<   for(int i=0;i<nptr;i++) {
<     if(ptrs[i]){
<       fmt::write_ptr(2,ptrs[i]);
<       write(2,L("\n"));
<       free(ptrs[i]);
<       ptrs[i]=0;
<     };
Only in main/bin: lspath.cc
Only in main/bin: not.cc
diff '--color=auto' -r main/bin/report.cc oldarc/bin/report.cc
1c1,5
< #include<syscall.hh>
---
> #include <errno.hh>
> #include <fmt.hh>
> #include <syscall.hh>
> #include <getopt.hh>
> #include <buf.hh>
3,9c7,144
< //   #define wifexited(res) (wtermsig(res)==0)
< //   #define wtermsig(res) (res&0x7f)
< //   #define wexitstatus(res) ((res&0xff00)>>8)
< //   
< //   
< //   typedef char * str_t;
< //   typedef const char *str_c;
---
> using namespace fmt;
> extern "C" {
>   int main(int argc, char**argv, char**envp);
> };
> 
> buf_ns::buf_t buf;
> // int execve(const char * fn, char *const * argv, char *const * envp)
> pid_t xfork()
> {
>   pid_t pid=sys::fork();
>   if(pid<0) {
>     sys::write(1,"fork:",5);
>     sys::write(1,"wtf?",4);
>     exit(1);
>   };
>   return pid;
> };
> char def1[]="/bin/echo";
> char def2[]="/bin/sh";
> char *defs[] = { 
>   def1, def2, 0
> };
> #define wifexited(res) (wtermsig(res)==0)
> #define wtermsig(res) (res&0x7f)
> #define wexitstatus(res) ((res&0xff00)>>8)
> 
> 
> static char to_char(int num)
> {
>   return num+'0';
> };
> char env1[]="TEST1=test1";
> char env2[]="TEST2=test2";
> char env3[]="TEST3=test3";
> char *env[]
> {
>   env1, env2, env3, 0
> };
> char **clone(char **in)
> {
>   //buf.println((void*)in);
> 
>   int c=0;
>   while(in[c])
>     ++c;
>   char **res=new char*[c+1];
>   for(int i=0;i<c;i++)
>   {
>     //buf.println(in[i]);
>     res[i]=in[i];
>   };
>   res[c]=0;
>   //buf.println((void*)res);
>   return res;
> };
> int count(char**arr) 
> {
>   //buf.println("arr: ",(void*)arr);
>   int c=0;
>   while(arr[c])
>     ++c;
>   return c;
> };
> int dump(char**arr) 
> {
>   buf.println("\narr: ",(void*)arr);
>   int c=0;
>   buf.println();
>   while(arr[c])
>     ++c;
>   buf.println("arr.size()=",c);
>   for(int i=0;i<=c;i++) {
>     buf.println("arr[",i,"]=",arr[i]?arr[i]:"<null>  &=",(void*)arr[i]);
>   };
>   buf.println();
>   return c;
> };
> char **d_and_c(char**arr)
> {
>   ///int c=dump(arr);
>   int c=count(arr);
>   //buf.println("dump returned ", c);
>   auto clo=clone(arr);
>   //dump(clo);
>   return clo;
> };
> static char **argv;
> static char **envp;
> 
> template<typename itr_t, typename pred_t>
> itr_t find( itr_t &beg, pred_t pred )
> {
>   while(true)
>   {
>     if(pred(*beg))
>       return beg;
>     ++beg;
>   };
> };
> 
> typedef char * str_t;
> typedef const char *str_c;
> 
> template<size_t _n>
> struct str_list
> {
>   typedef str_t value_type;
>   typedef str_t *iterator;
>   typedef str_t &reference;
>   typedef str_t *pointer;
>   typedef const str_t *const_pointer;
> 
>   static constexpr size_t n = _n;
> 
>   struct data_t {
>     str_t list[n];
>     size_t i;
>     data_t()
>     {
>       memset(this,0,sizeof(*this));
> 
>     };
>     template<typename itr_t>
>     void push_back(itr_t beg, itr_t end)
>     {
>       while(beg!=end)
>         list[i++]=*beg++;
>     };
>   }data;
> 
> //     str_list(char **beg, char**end)
> //       :data(beg,end)
> //     {
> //       xassert(end-beg<=n);
> //       
> //       auto i=data.i;
> //       while(beg!=end)
> //         data.list[i++]=*beg++;
11,17c146,149
< //   int main(int argc, char** argv, char **envp)
< //   {
< //     if(argc<2) {
< //       write(2,"usage: ");
< //       write(2,argv[0]);
< //       write(2," <command>\n");
< //       return 2;
---
> //       size_t p(data.i);
> //       while(p<n)
> //         data.list[p++]=0;
> //       data.i=i;
19,58c151,153
< //     pid_t opid=sys::getpid();
< //     pid_t npid=xfork();
< //     int res;
< //     if(npid) {
< //       if(sys::wait(&res)<0){
< //         write(2,"wait: ");
< //         write(2,sys::strerror(sys::errno));
< //         write(2,"\n");
< //         return 1;
< //       };
< //   
< //       auto pos=argv;
< //       if(pos){
< //         if(*pos){
< //           write(2,*pos);
< //           while(*++pos){
< //             write(2," ");
< //             write(2,*pos);
< //           };
< //           write(2," returned ");
< //           write_dec(2,res);
< //           write(2,"\n");
< //           exit(res);
< //         };
< //       };
< //       if( wifexited(res) ) {
< //         res=wexitstatus(res);
< //         write(2,"returned ");
< //         write_dec(2,res);
< //         write(2,"\n");
< //         exit(res);
< //       } else {
< //         write(2,"sig: ");
< //         write_dec(2,wtermsig(res));
< //         write(2,"\n\n");
< //       };
< //     } else {
< //       ++argv;
< //       sys::execve(argv[0],argv, envp);
< //       return 0;
---
> //     str_list(char **beg)
> //       :data(beg)
> //     {
60,61c155,256
< //     return res;
< //   };
---
>   str_list()
>   {
>   };
>   const_pointer end() const
>   {
>     return &data.list[data.i];
>   };
>   const_pointer begin() const
>   {
>     return &data.list[0];
>   };
>   iterator begin() {
>     return &data.list[0];
>   };
>   iterator end() {
>     return &data.list[data.i];
>   };
>   void push_back(const str_c str)
>   {
>     push_back((str_t)str);
>   }; 
>   void push_back(const str_t str)
>   {
>     data.push_back(&str,1+&str);
>   };
>   template<typename itr_t>
>   void push_back(itr_t beg, itr_t end)
>   {
>     auto osize=size();
>     while(beg!=end)
>       push_back(*beg);
>     auto nsize=size();
>     buf.println("added ", (nsize-osize), "messags");
>   };
>   size_t size() const
>   {
>     return data.i;
>   };
> };
> 
> int main(int argc, char** _argv, char **_envp)
> {
>   int res=0;
>   str_list<20> strs;
>   strs.push_back("testing");
>   strs.push_back("testing");
>   strs.push_back("1");
>   strs.push_back("2");
>   strs.push_back("3");
>   strs.push_back(strs.begin(),strs.end());
>   for( auto str : strs )
>     buf.println(str);
> #if 0
>   str_list<1024> argv(_argv,_argv+argc);
>   str_list<1024> envp(_envp);
> 
>   argv.push_back(".");
>   for( auto str : argv )
>     buf.println(str);
> 
>   buf.println(argv.size()," items");
>   envp=_envp;
> #if 0
>   int fd=open("/dev/pts/7", sys::o_wronly);
>   sys::dup2(fd,2);
>   if(fd>2)
>     sys::close(fd);
> #endif
> 
>   if(argc<2) {
>     buf.println("argc=",argc," need 2");
>     return 2;
>   };
>   argv=d_and_c(argv+1);
>   timespec_t dur = { 0, 100000 };
>   timespec_t rem = { -1, -1 };
>   envp=d_and_c(env);
>   pid_t opid=sys::getpid();
>   pid_t npid=xfork();
>   if(npid) {
>     if(sys::wait(&res)<0){
>       buf.println(sys::errno,"wait:",sys::strerror(sys::errno));
>       return 1;
>     };
>     
>     if( wifexited(res) ) {
>       res=wexitstatus(res);
>     } else {
>       buf.println("sig: ", wtermsig(res), "\n\n");
>     };
>     auto pos=argv;
>     while(*pos){
>       buf.print(*pos++," ");
>     };
>     buf.println("returned ",res);
>   } else {
>     sys::execve(argv[0],argv, envp);
>     return 0;
>   };
> #endif
>   return res;
> };
diff '--color=auto' -r main/bin/string_view.cc oldarc/bin/string_view.cc
2a3,4
> extern "C" int main(int, char**);
> 
Only in main/bin: test_getopt.cc
diff '--color=auto' -r main/bin/usleep.cc oldarc/bin/usleep.cc
18a19,20
> 
> 
61c63,65
<   timespec tm;
---
>   if(!mul)
>     mul=1;
>   timespec tm = { 0, 0 };
63a68
>     tm.tv_nsec*=mul;
68,70d72
<   } else {
<     tm.tv_sec=1;
<     tm.tv_nsec=0;
Only in main/: breakpoints
diff '--color=auto' -r main/depends.pl oldarc/depends.pl
2,11d1
< use strict;
< use warnings;
< use autodie qw(:all);
< use Data::Dumper;
< 
< die "usage: $0 <files>" unless @ARGV;
< #    open(my $DEBUG,">debug.log.new");
< #    unlink("debug.log") if -e "debug.log";
< #    link("debug.log.new","debug.log");
< #    unlink("debug.log.new");
16d5
< my (@deps);
20c9,10
<   s{$}{\n} unless s{\s*\\\s*$}{ };
---
>   s{\s*$}{};
>   s{$}{\n} unless s{\\$}{ };
22,24d11
< #    $DEBUG->print(Data::Dumper->Dump([\@lines], [qw(*lines)]));
< @lines=split(/\n+/, join("", @lines));
< #    $DEBUG->print(Data::Dumper->Dump([\@lines], [qw(*lines)]));
26c13
< for( @lines ) 
---
> for( split(/\n+/, join("", @lines)) )
28d14
< #      $DEBUG->print(Data::Dumper->Dump([\$_], [qw(*_)]));
30d15
< #      $DEBUG->print(Data::Dumper->Dump([\$p1,\$p2], [qw(*p1 *p2)]));
39,40d23
< #$DEBUG->print(Data::Dumper->Dump([\%deps], [qw(*deps)]));
< 
48a32,34
> __DATA__
> print Dumper(\%deps);
> use Data::Dumper;
Only in main/doc: lspath.bash
diff '--color=auto' -r main/etc/cppflags oldarc/etc/cppflags
3c3
< -Iinc
---
> -Iinclude
diff '--color=auto' -r main/etc/cxxflags oldarc/etc/cxxflags
3,4c3
< -ggdb3
< -O0
---
> -ggdb3 -O0
diff '--color=auto' -r main/etc/ld_flags oldarc/etc/ld_flags
1,12d0
< --freestanding
< -Bdynamic
< -Llib
< -O0
< -ffreestanding
< -fno-exceptions
< -fno-stack-protector
< -ggdb3 -O0
< -nodefaultlibs
< -nolibc
< -nostartfiles
< -nostdlib
13a2
> -Llib
Only in main/: files.md5
Only in main/: inc
Only in oldarc: include
Only in oldarc: kmod_dev
Only in main/lib: cxxabi.cc
diff '--color=auto' -r main/lib/errno.cc oldarc/lib/errno.cc
10a11,15
>     {
>       write_buf<> buf(2);
>       if(err!=11)
>         buf.put("errno=").fmtln(err);
>     };
diff '--color=auto' -r main/lib/getopt.cc oldarc/lib/getopt.cc
172c172
<   if (argv[optind][0]!='-' || argv[optind][1]!='-' || argv[optind][2]==0)
---
>   if (strlen(argv[optind]) < 3 || strncmp(argv[optind], "--", 2) != 0)
diff '--color=auto' -r main/lib/mm.cc oldarc/lib/mm.cc
7a8,20
> void _write_pos(const char *file, unsigned line)
> {
>   write(1,file);
>   write(1,":");
>   write_dec(1,line);
>   write(1,":");
> };
> #define write_pos() _write_pos(__FILE__,__LINE__);
> #define write_func() \
>   write_pos(); \
>   write(1,L("Entering ")); \
>   write(1,__PRETTY_FUNCTION__); \
>   write(1,L("\n"));
55a69
>     write_func();
57,63d70
<     if(0){
<       write_buf<> msg(2);
<       msg.put("malloc(");
<       msg.fmt(size);
<       msg.put(") => ");
<       msg.fmtln(res);
<     };
68a76
>     write_func();
70c78,83
<     while(*pos) {
---
>     while(true) {
>       write(1,L("pos: "));
>       write_ptr(1,*pos);
>       write(1,L("\n"));
>       if(!*pos)
>          break;
170a184,188
>     write_func();
>     write(1,"  size=");
>     write_dec(1,size);
>     write(1,"\n");
> 
diff '--color=auto' -r main/lib/start.S oldarc/lib/start.S
1,3d0
< #ifdef __ELF__
< .section .note.GNU-stack,""
< #endif
7,15c4,11
<   xorl %ebp,%ebp
< 	call libc_init
<   movq 0(%rsp),%rdi
<   lea 8(%rsp),%rsi
<   lea 16(%rsp),%rdx
<   call main
< 	movq %rax,%rdi
< 	call exit
< 	int3
---
>    xorl %ebp,%ebp
> 	 call libc_init
>    movq 0(%rsp),%rdi
>    lea 8(%rsp),%rsi
>    call main
> 	 movq %rax,%rdi
>    call exit
> 	 int3
Only in main/: sbin
