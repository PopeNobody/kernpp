diff '--color=auto' -r main/.git simpmake/.git
1c1
< gitdir: /home/nn/src/git/hub/.git/worktrees/main
---
> gitdir: /home/nn/src/git/hub/.git/worktrees/simpmake
diff '--color=auto' -r main/.gitignore simpmake/.gitignore
1d0
< depends.mk
18,19c17
< ,/bin/lspath
< bin/lspath
---
> 
21a20,23
> bin/printenv
> bin/runrep
> bin/touch
> hide
diff '--color=auto' -r main/Makefile simpmake/Makefile
4d3
< define dir_infer
6,22c5,6
< $1/src:=  $(wildcard  $1/*.cc)                         
< $1/exe:=  $(patsubst  %.cc,%,   $($1/src))             
< $1/asm:=  $(wildcard  $1/*.S)                          
< $1/xxx:=  $(patsubst  %,%.o,   $($1/asm))             
< $1/exe+=  $(patsubst  %,%,      $($1/asm))             
< $1/obj:=  $(patsubst  %,%.o,   $($1/src))             
< $1/cpp:=  $(patsubst  %,%.ii,   $($1/src))             
< $1/dep:=  $(patsubst  %,%.d,    $($1/obj)   $($1/cpp)  $($1/asm))
< $1:=$($1/exe)
< endef
< $(call dir_infir,bin,lib) 
< 
< all/obj:= $(lib/obj) $(bin/obj)
< all/xxx:= $(lib/xxx) $(bin/xxx)
< all/cpp:= $(lib/cpp) $(bin/cpp)
< all/src:= $(lib/src) $(bin/src)
< all/dep:= $(lib/dep) $(bin/dep)
---
> bin/src:= $(wildcard bin/*.cc)
> tst/src:= $(wildcard tst/*.cc)
24c8
< include /dev/null $(wildcard $(all/dep))
---
> include etc/resolve.mk $(wildcard $(all/dep))
26,27c10,11
< ext/obj:= $(filter-out $(all/obj), $(wildcard *.o))
< ext/xxx:= $(filter-out $(all/xxx), $(wildcard *.o))
---
> ext/obj:= $(filter-out $(all/obj), $(wildcard *.oo))
> ext/xxx:= $(filter-out $(all/xxx), $(wildcard *.oo))
30c14,15
< bin:= $(bin/exe)
---
> all+=bin/echo
> bin:= $(bin/exe) bin/echo
33d17
< all: $(all)
35c19,23
< include /dev/null $(wildcard $(all/dep))
---
> include /dev/null $(wildcard $(all/dep) sbin/genctype.mk)
> 
> 
> bin/echo: bin/printenv
> 	ln -f $< $@
40c28
< $(bin/exe): %: %.o sbin/link etc/ld_flags
---
> $(bin/exe): %: %.oo sbin/link etc/ld_flags
44c32
< 	rm -f $*.ii $*.o
---
> 	rm -f $*.ii $*.oo
47c35
< $(all/xxx): %.o: %.S sbin/casm etc/asmflags
---
> $(all/xxx): %.oo: %.S sbin/casm etc/asmflags
50c38
< $(all/obj): %.o: %.ii sbin/comp etc/cxxflags
---
> $(all/obj): %.oo: %.ii sbin/comp etc/cxxflags
53,55c41,43
< cur/dep:=$(wildcard *.o.d)
< cur/obj:=$(wildcard *.o) $(patsubst %.d,%,$(cur/dep))
< cur/src:=$(patsubst %.o,%.cc,$(cur/obj))
---
> cur/dep:=$(wildcard *.oo.d)
> cur/obj:=$(wildcard *.oo) $(patsubst %.d,%,$(cur/dep))
> cur/src:=$(patsubst %.oo,%.cc,$(cur/obj))
66c54
< 	rm -f */*.[ioad]
---
> 	rm -f $(wildcard $(bin/exe) $(all/cpp) $(all/obj) $(all/cpp))
77c65,67
< 	nm */*.a */*.o --defined-only -A --demangle
---
> 	nm */*.aa */*.oo --defined-only -A --demangle
> 
> all: $(all)
diff '--color=auto' -r main/bin/.gitignore simpmake/bin/.gitignore
9,20d8
< not
< cat
< echo
< false
< ls
< lspath
< not
< report
< string_view
< test_getopt
< true
< usleep
diff '--color=auto' -r main/bin/cat.cc simpmake/bin/cat.cc
4c4
< 
---
> using sys::exit;
51a52,93
> extern "C" {
>   int main(int argc, char**argv,char **envp);
> };
> template<typename val_t>
> struct vector
> {
>   val_t *arr;
>   size_t len;
>   vector()
>     : arr(nullptr), len(0)
>   {
>   };
>   vector(val_t *beg, val_t *end)
>     : arr(beg), len(end-beg)
>   {
>   };
>   val_t &operator[](size_t n)
>   {
>     assert(n<size());
>     return arr[n];
>   };
>   const val_t &operator[](size_t n) const
>   {
>     assert(n<size());
>     return arr[n];
>   };
>   size_t size() const {
>     return  len;
>   };
>   const val_t *begin() const {
>     return arr;
>   };
>   const val_t *end() const {
>     return arr+len;
>   };
>   val_t *begin() {
>     return arr;
>   };
>   val_t *end() {
>     return arr+len;
>   };
> };
85a128,134
>     write(1,"c=");
>     write_dec(1,c);
>     write(1," argc=");
>     write_dec(1,argc);
>     write(1," optind=");
>     write_dec(1,optind);
>     write(1,"\n");
139c188
<         write(2,"open:");
---
>         write(2,"open:",5);
Only in main/bin: echo.cc
diff '--color=auto' -r main/bin/ls.cc simpmake/bin/ls.cc
10c10
< void swap(obj_t &lhs, obj_t &rhs)
---
> void swap(obj_t &lhs, obj_t rhs)
15a16,80
> struct dirents_t {
>   struct ent_t {
>     bool dir;
>     char name[256];
>     ent_t()
>       :dir(false)
>     {
>     };
>     ent_t(const char *_name, bool _dir)
>       :dir(_dir)
>     {
>       strncpy(name,_name,sizeof(name));
>     };
>   };
>   size_t cap;
>   size_t cnt;
>   ent_t **lst;
>   dirents_t()
>     : lst(0), cap(0), cnt(0)
>   {
>   };
>   int cmp(ent_t &lhs, ent_t&rhs) {
>     return strcmp(rhs.name,lhs.name);
>   };
>   void sort() {
>     size_t n=size();
>     for(int i=0;i<n-2;i++) {
>       int m=i;
>       for(int j=i+1;j<n;j++) {
>         if(cmp(*lst[m],*lst[j])<0)
>           m=j;
>       };
>       if(i!=m)
>         swap(lst[i],lst[m]);
>     };
>   };
>   ~dirents_t() {
>     for(int i=0;i<cnt;i++)
>       delete lst[i];
>     delete[] lst;
>   };
>   void push_back(const char *name, bool isdir)
>   {
>     if(cnt==cap) {
>       if(cap) {
>         ent_t **nlst = new ent_t*[cap+16];
>         memcpy(nlst,lst,sizeof(ent_t*)*cap);
>         delete[] lst;
>         lst=nlst;
>       } else {
>         lst = new ent_t*[16];
>       };
>       cap+=16;
>     };
>     ent_t *new_ent=new ent_t(name,isdir);
>     lst[cnt++]=new_ent;
>   };
>   ent_t &get(size_t pos)
>   {
>     return *lst[pos];
>   };
>   size_t size() const {
>     return cnt;
>   };
> };
24d88
< bool dotfiles=false;
28,68d91
< 
< int sign(int lhs){
<   if(lhs<0)
<     return -1;
<   else if (lhs>0)
<     return 1;
<   else
<     return 0;
< };
< int cmp(const char *lhs, const char *rhs){
<   while(*lhs == *rhs && *lhs)
<     ++lhs, ++rhs;
<   return sign(*lhs-*rhs);
< };
< void sort(linux_dirent **beg, linux_dirent**end)
< {
<   if(beg==end)
<     return;
<   linux_dirent** pos=beg;
<   while(pos<end){
<     while(++beg<end){
<       if(cmp((*beg)->d_name,(*pos)->d_name)<0)
<         swap(*beg,*pos);
<     }
<     pos++;
<     beg=pos;
<   }
< };
< bool skip(const char *name){
<   if(name[0]!='.')
<     return false;
<   if(ignore==normal)
<     return true;
<   if(ignore==minimal)
<     return false;
<   if(name[1]==0)
<     return true;
<   if(name[1]=='.' && name[2]==0)
<     return true;
<   return false;
< };
70,71d92
<   int n=0;
<   linux_dirent*ents[8192];
72a94
>   dirents_t ents;
82,85c104,105
<     while(beg!=end){
<       if(!skip(beg->d_name)){
<         ents[n++]=beg;
<       };
---
>     while(beg!=end) {
>       ents.push_back(beg->d_name,beg->d_type == DT_DIR);
87c107,108
<     }
---
>     };
>     //mm_show();
89,92c110,124
<   sort(ents,ents+n);
<   for(int i=0;i<n;i++){
<     write(1,ents[i]->d_name);
<     write(1,"\n");
---
>   ents.sort();
>   for(size_t i=0;i<ents.size();i++)
>   {
>     auto ent=ents.get(i);
>     if(ignore==dot_dot) {
>       if(!strcmp(ent.name,"."))
>         continue;
>       if(!strcmp(ent.name,".."))
>         continue;
>     } else if ( ignore != minimal ) {
>       if(ent.name[0]=='.')
>         continue;
>     };
>     write(1,ent.name);
>     write(1,L("\n"));
150a183,185
> extern "C" {
>   int main(int argc, char**argv, char**envp) ;
> };
161d195
<   using fmt::write_dec;
Only in main/bin: lspath.cc
Only in main/bin: not.cc
Only in simpmake/bin: printenv.cc
diff '--color=auto' -r main/bin/report.cc simpmake/bin/report.cc
1c1
< #include<syscall.hh>
---
> #include <syscall.hh>
3,61c3,56
< //   #define wifexited(res) (wtermsig(res)==0)
< //   #define wtermsig(res) (res&0x7f)
< //   #define wexitstatus(res) ((res&0xff00)>>8)
< //   
< //   
< //   typedef char * str_t;
< //   typedef const char *str_c;
< //   
< //   int main(int argc, char** argv, char **envp)
< //   {
< //     if(argc<2) {
< //       write(2,"usage: ");
< //       write(2,argv[0]);
< //       write(2," <command>\n");
< //       return 2;
< //     };
< //     pid_t opid=sys::getpid();
< //     pid_t npid=xfork();
< //     int res;
< //     if(npid) {
< //       if(sys::wait(&res)<0){
< //         write(2,"wait: ");
< //         write(2,sys::strerror(sys::errno));
< //         write(2,"\n");
< //         return 1;
< //       };
< //   
< //       auto pos=argv;
< //       if(pos){
< //         if(*pos){
< //           write(2,*pos);
< //           while(*++pos){
< //             write(2," ");
< //             write(2,*pos);
< //           };
< //           write(2," returned ");
< //           write_dec(2,res);
< //           write(2,"\n");
< //           exit(res);
< //         };
< //       };
< //       if( wifexited(res) ) {
< //         res=wexitstatus(res);
< //         write(2,"returned ");
< //         write_dec(2,res);
< //         write(2,"\n");
< //         exit(res);
< //       } else {
< //         write(2,"sig: ");
< //         write_dec(2,wtermsig(res));
< //         write(2,"\n\n");
< //       };
< //     } else {
< //       ++argv;
< //       sys::execve(argv[0],argv, envp);
< //       return 0;
< //     };
< //     return res;
< //   };
---
> using namespace sys;
> char **envp;
> template<typename val_t>
> void fmt(fd_t fd, val_t val);
> template<>
> void fmt<int>(fd_t fd, int val)
> {
>   static char buf[]="xxxxxxxxxxxxxxxx";
>   char *end=buf+sizeof(buf)-1;
>   if(val) {
>     while(val) {
>       *--end=(val%10)+'0';
>       val/=10;
>     };
>   } else {
>     *--end='0';
>   };
>   write(2,end);
> };
> template<>
> void fmt<const char*>(fd_t fd, const char * val)
> {
>   write(fd,val);
> }
> 
> int main(int argc, char**argv){
>   envp=argv+2;
>   for(int i=0;i<argc;i++){
>     write(1,argv[i],strlen(argv[i]));
>     write(1,"\n",1);
>   };
>   envp=argv+argc;
>   while(*envp)
>     write(1,*envp++);
>   argv++;
>   pid_t pid=fork();
>   pid_t res;
>   if(pid) {
>     int ret;
>     do {
>       res=waitpid(0,&ret,0);
>       fmt(2,"pid ");
>       fmt(2,res);
>       fmt(2,"  returned ");
>       fmt(2,ret);
>       exit(ret/256);
>     } while(res>0);
>   } else {
>     execve(argv[0],argv,envp);
>     write(2,"execve:argv[0]");
>     exit(1);
>   }
>   return 0;
> };
Only in simpmake/bin: runrep.cc
diff '--color=auto' -r main/bin/string_view.cc simpmake/bin/string_view.cc
2a3,4
> extern "C" int main(int, char**);
> 
Only in main/bin: test_getopt.cc
Only in simpmake/bin: touch.cc
Only in simpmake/bin: touch.help.inl
diff '--color=auto' -r main/bin/true.S simpmake/bin/true.S
7c7
<    movl $60,%eax
---
>    movl $60,%rax
diff '--color=auto' -r main/bin/usleep.cc simpmake/bin/usleep.cc
7a8
> using sys::exit;
Only in main/: breakpoints
Only in main/: depends.pl
Only in simpmake/doc: git-log.txt
Only in main/doc: lspath.bash
Only in simpmake/doc: touch.help
diff '--color=auto' -r main/etc/asmflags simpmake/etc/asmflags
0a1
> -ggdb3 -O0
diff '--color=auto' -r main/etc/cppflags simpmake/etc/cppflags
2d1
< 
4a4,7
> -ffreestanding
> -fno-exceptions
> -ggdb3 -O0
> -fno-stack-protector
diff '--color=auto' -r main/etc/cxxflags simpmake/etc/cxxflags
3,4c3
< -ggdb3
< -O0
---
> -ggdb3 -O0
diff '--color=auto' -r main/etc/ld_flags simpmake/etc/ld_flags
1,2d0
< --freestanding
< -Bdynamic
4a3
> -Wl,--verbose
8c7
< -ggdb3 -O0
---
> -ggdb3
Only in simpmake/etc: resolve.mk
Only in main/: files.md5
Only in simpmake/inc: assert.h
diff '--color=auto' -r main/inc/buf.hh simpmake/inc/buf.hh
4a5
> #include <fmt.hh>
10c11,13
<     buf_t()
---
>     int fd;
>     buf_t(int fd=1)
>       :fd(fd)
16c19
<       sys::write(1,text,len);
---
>       sys::write(fd,text,len);
diff '--color=auto' -r main/inc/c_str.hh simpmake/inc/c_str.hh
111c111
<   return sys::write(fd, str.begin(), str.size());
---
>   return sys::sys_write(fd, str.begin(), str.size());
diff '--color=auto' -r main/inc/fmt.hh simpmake/inc/fmt.hh
7c7
< #define AAI __attribute__((__always_inline__))
---
> #define AIL __attribute__((__always_inline__))
9c9
< #define AAI
---
> #define AIL
35c35
<   inline char *fmt_ptr(void *val, char *beg, char *end) {
---
>   inline char *fmt_ptr(const void *val, char *beg, char *end) {
53,54d52
<     if(neg)
<       *--end = '-';
61c59
<   inline int write_dec(fd_t fd, int val) {
---
>   inline int write_dec(fd_t fd, size_t val) {
63c61
<     return write(fd, fmt::fmt_dec(val<0,val<0?-val:val, buf, &buf[sizeof(buf) - 1]));
---
>     return write(fd, fmt::fmt_dec(false,val, buf, &buf[sizeof(buf) - 1]));
69c67
<   inline int write_ptr(fd_t fd, void *ptr) {
---
>   inline int write_ptr(fd_t fd, const void *ptr) {
71c69
<     return write(fd, fmt::fmt_ptr((void *)ptr, buf, &buf[sizeof(buf) - 1]));
---
>     return write(fd, fmt::fmt_ptr((const void *)ptr, buf, &buf[sizeof(buf) - 1]));
115c113
<           exit(1);
---
>           sys::exit(1);
119a118,137
> #define show_val(x) do_show_val(L(#x),(x))
> #define show_dec(x)                                                            \
>   do {                                                                         \
>     write(2, L(#x " => "));                                                    \
>     write_dec(2, (x));                                                         \
>     write(2, L("\n"));                                                         \
>   } while (false);
> #define show_ptr(x)                                                            \
>   do {                                                                         \
>     write(2, L(#x " => "));                                                    \
>     write_ptr(2, (x));                                                         \
>     write(2, L("\n"));                                                         \
>   } while (false);
> #define show_hex(x)                                                            \
>   do {                                                                         \
>     write(2, L(#x " => "));                                                    \
>     write_hex(2, (x));                                                         \
>     write(2, L("\n"));                                                         \
>   } while (false);
> #undef AAI
165c183
<     int fmt(void *vp)
---
>     int fmt(const void *vp)
diff '--color=auto' -r main/inc/getopt.hh simpmake/inc/getopt.hh
1,2c1,34
< #ifndef GETOPT_HH
< #define GETOPT_HH GETOPT_HH
---
> /*******************************************************************************
>  * Copyright (c) 2012-2017, Kim Grasman <kim.grasman@gmail.com>
>  * All rights reserved.
>  *
>  * Redistribution and use in source and binary forms, with or without
>  * modification, are permitted provided that the following conditions are met:
>  *   * Redistributions of source code must retain the above copyright
>  *     notice, this list of conditions and the following disclaimer.
>  *   * Redistributions in binary form must reproduce the above copyright
>  *     notice, this list of conditions and the following disclaimer in the
>  *     documentation and/or other materials provided with the distribution.
>  *   * Neither the name of Kim Grasman nor the
>  *     names of contributors may be used to endorse or promote products
>  *     derived from this software without specific prior written permission.
>  *
>  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
>  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
>  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
>  * ARE DISCLAIMED. IN NO EVENT SHALL KIM GRASMAN BE LIABLE FOR ANY
>  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
>  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
>  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
>  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
>  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
>  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
>  *
>  ******************************************************************************/
> 
> #ifndef INCLUDED_GETOPT_PORT_H
> #define INCLUDED_GETOPT_PORT_H
> 
> #if defined(__cplusplus)
> extern "C" {
> #endif
22a55,57
> #if defined(__cplusplus)
> }
> #endif
Only in main/inc: ostream.hh
diff '--color=auto' -r main/inc/stdlib.hh simpmake/inc/stdlib.hh
7,20c7,20
<   void*         malloc(size_t);
<   void          free(void*);
<   void*         realloc(void* ptr, size_t size);
<   inline void*  sbrk(intptr_t increment) AAI;
<   inline int    strcmp(const char* s1, const char* s2) AAI;
<   inline void*  memset(void* s, int c, size_t n) AAI;
<   inline void*  memcpy(void* dst, const void* src, size_t n) AAI;
<   inline int    memcmp(const void* dst, const void* src, size_t n) AAI;
<   inline void*  memmove(void* dst, const void* src, size_t n) AAI;
<   inline void*  memchr(const void* _mem, int c, size_t n) AAI;
<   inline char*  strcpy(char* d, const char* s) AAI;
<   inline char*  strncpy(char* dst, const char* src, size_t n) AAI;
<   inline char*  strncpy(char* dst, const char* src, size_t n) AAI;
<   inline size_t strlen(const char* s) AAI;
---
>   extern void*  malloc(size_t);
>   extern void   free(void*);
>   extern void*  realloc(void* ptr, size_t size);
>   inline void*  sbrk(intptr_t increment) AIL;
>   inline int    strcmp(const char* s1, const char* s2) AIL;
>   inline void*  memset(void* s, int c, size_t n) AIL;
>   inline void*  memcpy(void* dst, const void* src, size_t n) AIL;
>   inline int    memcmp(const void* dst, const void* src, size_t n) AIL;
>   inline void*  memmove(void* dst, const void* src, size_t n) AIL;
>   inline void*  memchr(const void* _mem, int c, size_t n) AIL;
>   inline char*  strcpy(char* d, const char* s) AIL;
>   inline char*  strncpy(char* dst, const char* src, size_t n) AIL;
>   inline char*  strncpy(char* dst, const char* src, size_t n) AIL;
>   inline size_t strlen(const char* s) AIL;
31d30
<   void         exit(int res);
diff '--color=auto' -r main/inc/syscall.hh simpmake/inc/syscall.hh
8c8
< #define AAI __attribute__((__always_inline__))
---
> #define AIL __attribute__((__always_inline__))
11c11
< #define AAI
---
> #define AIL
55c55
< #define chk_return(val) return set_errno(val);
---
> #define chk_return(val) return (val < 0 ? set_errno(val) : val)
60,67c60,70
<     inline int     nanosleep(timespec_p rqtp, timespec_p rmtp) AAI;
<     inline int     close(fd_t fd) AAI;
<     inline int     stat(const char* pathname, struct stat* statbuf) AAI;
<     inline fd_t    open(const char* pathname, open_flags  flags, open_mode   mode) AAI;
<     inline time_t  time(time_t*) AAI;
<     inline ssize_t getdents(fd_t fd, linux_dirent64* buf, size_t len) AAI;
<     inline ssize_t read(fd_t fd, char* buf, size_t len) AAI;
<     inline ssize_t write(fd_t fd, const char* buf, size_t len) AAI;
---
>     inline int     nanosleep(timespec_p rqtp, timespec_p rmtp) AIL;
>     inline int     close(fd_t fd) AIL;
>     inline int     stat(const char* pathname, struct stat* statbuf) AIL;
>     inline fd_t    open(const char* pathname,
>                         open_flags  flags,
>                         open_mode   mode) AIL;
>     inline time_t  time(time_t*) AIL;
>     inline ssize_t getdents(fd_t fd, linux_dirent64* buf, size_t len) AIL;
>     inline ssize_t read(fd_t fd, char* buf, size_t len) AIL;
>     inline ssize_t sys_write(fd_t fd, const char* buf, size_t len) AIL;
>     inline int utimensat(fd_t dfd, istr_t filename, timespec_p utimes, int flags) AIL;
82c85
<   inline ssize_t write(fd_t fd, const char* buf, size_t len)
---
>   inline ssize_t sys_write(fd_t fd, const char* buf, size_t len)
347d349
< // __NR__ exit = 60 
351,352d352
<     int exit_val;
<     exit_val= res & 0xff;
355c355
<         : "a"(60), "D"(exit_val)
---
>         : "a"(60), "D"(res)
358c358
<       ;
---
>       sleep(1);
449c449,453
< } // namespace sys
---
>   // __NR__ utimensat = 280 
> 
>   inline int utimensat(fd_t dfd, istr_t filename, timespec_p utimes, int flags)
>     __attribute__((__always_inline__));
>   } // namespace sys
454,455c458,460
<   inline ssize_t write(int fd, const char* buf, const char* end) AAI;
<   inline ssize_t write(fd_t fd, const char* buf) AAI;
---
>   inline ssize_t write(int fd, const char* buf, size_t len) AIL;
>   inline ssize_t write(int fd, const char* buf, const char* end) AIL;
>   inline ssize_t write(fd_t fd, const char* buf) AIL;
456a462,465
>   inline ssize_t write(int fd, const char* buf, size_t len)
>   {
>     return sys_write(fd, buf, len);
>   }
459c468
<     return write(fd, buf, end - buf);
---
>     return sys_write(fd, buf, end - buf);
464c473
<     const char* end= buf ? buf : "(null)";
---
>     const char* end= buf;
467c476
<     return write(fd, buf, end - buf);
---
>     return sys_write(fd, buf, end - buf);
471c480
<     AAI;
---
>     AIL;
475c484
<     AAI;
---
>     AIL;
484c493
<       ssize_t res= write(fd, pos, end - pos);
---
>       ssize_t res= sys_write(fd, pos, end - pos);
534c543
< #undef AAI
---
> #undef AIL
539,543d547
< 
< extern "C" {
<   int main(int argc, char**argv, char**envp);
< };
< 
diff '--color=auto' -r main/lib/abi.cc simpmake/lib/abi.cc
18d17
< 
Only in main/lib: cxxabi.cc
diff '--color=auto' -r main/lib/errno.cc simpmake/lib/errno.cc
3c3
< #include <write_buf.hh>
---
> #include <buf.hh>
10a11,15
>     {
>       buf_ns::buf_t buf(2);
>       if(err!=11)
>         buf.println("seting error to=",err);
>     };
26c31
<     write_buf<> buf(2);
---
>     buf_ns::buf_t buf(2);
28,29c33,34
<       buf.put(msg1);
<       buf.put(":");
---
>       buf.print(msg1);
>       buf.print(":");
32,33c37,38
<       buf.put(msg2);
<       buf.put(":");
---
>       buf.print(msg2);
>       buf.print(":");
35c40
<     buf.putln(strerror(errno));
---
>     buf.println(strerror(errno));
diff '--color=auto' -r main/lib/getopt.cc simpmake/lib/getopt.cc
172c172
<   if (argv[optind][0]!='-' || argv[optind][1]!='-' || argv[optind][2]==0)
---
>   if (strlen(argv[optind]) < 3 || strncmp(argv[optind], "--", 2) != 0)
diff '--color=auto' -r main/lib/start.S simpmake/lib/start.S
1,5c1,2
< #ifdef __ELF__
< .section .note.GNU-stack,""
< #endif
< 	.text
< 	.global _start
---
> .text
> .global _start
7,8c4,5
<   xorl %ebp,%ebp
< 	call libc_init
---
>   xorq %rbp,%rbp
> #  call libc_init
11c8,17
<   lea 16(%rsp),%rdx
---
>   mov %rsi, %rdx      # Copy argv pointer to rdx (envp)
> loop_check:
>     mov (%rdx), %rax    # Load the current argv element
>     test %rax, %rax    # Check if it's null
>     jz envp_found      # Jump if null (end of argv)
>     add $8, %rdx       # Increment rdx (move to next argv element)
>     jmp loop_check     # Continue the loop
> 
> envp_found:
>     add $8, %rdx       # Increment rdx (now points to envp)
13,15c19,21
< 	movq %rax,%rdi
< 	call exit
< 	int3
---
>   movq %rax,%rdi
>   call exit
>   int3
19a26
> .section .note.GNU-stack 
diff '--color=auto' -r main/lib/stdlib.cc simpmake/lib/stdlib.cc
2c2
< #define AAI
---
> #define AIL
Only in simpmake: scrap
Only in main/: script
Only in main/: test.pl
